@model Game

@{
    ViewData["Title"] = "Control";
}

<div class="row">
    <div>
        <button type="button" id="AddBall" onclick="AddBall()">Add Ball</button>
    </div>
</div>

<div class="row">
    <input type="hidden" id="GameWidth" value="@Model.Width" />
    <input type="hidden" id="GameHeight" value="@Model.Height" />

    <div class="col-auto">
        <canvas id="canvas" width="@Model.Width" height="@Model.Height"></canvas>
    </div>
    <div class="col-md-4">
        <ul id="Announcement"></ul>
    </div>
</div>

@section scripts{
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/pubbleHub").build();

        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        var user = null;
        var users = [];
        var pressKeyList = [];
        var shapes = [];
        var centerMode = true;

        var gameWidth = document.getElementById('GameWidth').value;

        var gameHeight = document.getElementById('GameHeight').value;

        var windowWidth = canvas.width;

        var windowHeight = canvas.height;

        var centerX = gameWidth / 2 - (gameWidth - windowWidth) / 2;

        var centerY = gameHeight / 2 - (gameHeight - windowHeight) / 2;

        const stars = createStars(gameWidth, gameHeight, 50);


        connection.start().then(function () {
            console.log("Connection started");
            UpdateCanvas();
        }).catch(function (err) {
            return console.error(err.toString());
        });

        connection.on('UpdateUserList', function (updatedUsersJson) {
            users = JSON.parse(updatedUsersJson);
            user = users.find(e => e.ConnectionId == user.ConnectionId);
        });

        connection.on('UpdateShapeList', function (shpaeJson){
            shapes = JSON.parse(shpaeJson);
        });

        connection.on('WorldAnnouncement', function (msg) {
            var li = document.createElement("li");
            document.getElementById("Announcement").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you
            // should be aware of possible script injection concerns.
            li.textContent = `[World]:${msg}`;
        });

        function AddBall() {
            connection.invoke("AddBall").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function UpdateCanvas() {
            requestAnimationFrame(UpdateCanvas);
            // Clear the canvas
            ctx.clearRect(0, 0, 1200, 800);
            Background();
            DrawStarrySky();

            // Draw each user's ball on the canvas
            users.forEach(user => {
                switch (user.Ball.Type) {
                    case 0:
                        drawBall(user.Ball.X, user.Ball.Y, user.Ball.Radius, user.Color);
                        break;
                    default:
                        break;
                }
            });

            //draw each shape on the canvas
            shapes.forEach(shape => {
                switch (shape.Type) {
                    case 0:
                        drawBall(shape.X, shape.Y, shape.Radius, shape.Color);
                        break;
                }
            });
        }

        function Background() {
            backgroundColor = "#030318";
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(calcX(0), calcY(0), calcX(gameWidth) - calcX(0), calcY(gameHeight) - calcY(0));
            ctx.strokeStyle = "green";
            ctx.strokeRect(calcX(0), calcY(0), calcX(gameWidth) - calcX(0), calcY(gameHeight) - calcY(0));
        }

        // Draw the ball on the canvas
        function drawBall(x, y, radius, color) {
            ctx.beginPath();
            ctx.arc(calcX(x), calcY(y), radius, 0, Math.PI * 2);
            ctx.fillStyle = color;
            ctx.fill();
            ctx.closePath();
        }

        function calcX(x) {
            if (!centerMode || user == null) return x;
            if (user.Ball.X - centerX > 0) {
                return x - (user.Ball.X - centerX);
            } else {
                return x + (centerX - user.Ball.X)
            }
            return x + (centerX - user.Ball.X);
        }

        function calcY(y) {
            if (!centerMode || user == null) return y;
            if (user.Ball.Y - centerY > 0) {
                return y - (user.Ball.Y - centerY);
            } else {
                return y + (centerY - user.Ball.Y)
            }
            return y + (centerY - user.Ball.Y);
        }


        function createStars(width, height, spacing) {
            const stars = [];
            const maxStarRadius = 3;

            for (let x = 0; x < width; x += spacing) {
                for (let y = 0; y < height; y += spacing) {
                    const star = {
                        x: x + randomInt(spacing),
                        y: y + randomInt(spacing),
                        r: Math.random() * maxStarRadius
                    };
                    stars.push(star);
                }
            }
            return stars;
        }

        function randomInt(max) {
            return Math.floor(Math.random() * max);
        }

        var count = 0
        var starTime = new Date();
        function DrawStarrySky() {

            function fillCircle(x, y, r, fillStyle) {
                ctx.beginPath();
                ctx.fillStyle = fillStyle;
                ctx.arc(x, y, r, 0, Math.PI * 2);
                ctx.fill();
            }

            const minStarOpacity = 0.1;
            const maxStarOpacity = 0.7;

            function getOpacity(factor) {
                const opacityIncrement =
                    (maxStarOpacity - minStarOpacity) * Math.abs(Math.sin(factor));
                const opacity = minStarOpacity + opacityIncrement;
                return opacity;
            }

            var i = 0;
            stars.forEach(function (star) {
                const x = star.x;
                const y = star.y;
                const r = star.r;
                const opacity = getOpacity(count + i);
                fillCircle(calcX(x), calcY(y), r, `rgba(255, 255, 255, ${opacity}`);
                i++;
            });

            const moon = {
                color: "#fea",
                x: calcX(gameHeight / 3),
                y: calcY(gameWidth / 3),
                r: 80
            };

            fillCircle(moon.x, moon.y, moon.r, moon.color);
            // render a smaller circle above the moon to give it that well-known moon-shape
            fillCircle(
                moon.x - moon.r / 3,
                moon.y - moon.r / 3,
                moon.r,
                "#030318"
            );
            if (new Date() - starTime > 500) {
                count++;
                starTime = new Date();
            }
        }
    </script>
}
